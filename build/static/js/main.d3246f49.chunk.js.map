{"version":3,"sources":["media/itunes.png","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","fetchSongs","e","preventDefault","console","log","refs","name","value","fetch","number","then","res","json","data","setState","list","results","isLoaded","state","className","onSubmit","this","src","banner","alt","type","placeholder","ref","map","item","index","key","artworkUrl100","trackName","artistName","onClick","window","open","previewUrl","onKeyPress","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,oC,qPCsE5BC,E,YA/DX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,WAAa,SAACC,GACVA,EAAEC,iBACFC,QAAQC,IAAI,EAAKC,KAAKC,KAAKC,OAC3BC,MAAM,4EAAD,OAA6E,EAAKH,KAAKC,KAAKC,MAA5F,kBAA2G,EAAKF,KAAKI,OAAOF,QAChIG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACLV,QAAQC,IAAIS,GACZ,EAAKC,SAAU,CACbC,KAAMF,EAAKG,QACXC,UAAU,OAGdd,QAAQC,IAAI,UAlBZ,EAAKc,MAAQ,CACTH,KAAK,GACLE,UAAW,GAJA,E,sEAwBf,OACI,yBAAKE,UAAU,uBACX,0BAAMA,UAAU,eAAeC,SAAYC,KAAKrB,YAC5C,yBAAKmB,UAAU,kBACX,yBAAKG,IAAKC,IAAQC,IAAI,iBACtB,yBAAKL,UAAU,kBAAf,eACA,yBAAKA,UAAU,qBAAf,oDAEJ,yBAAKA,UAAU,iBACX,2BAAOA,UAAU,eAAeM,KAAO,OAAOC,YAAc,eAAeC,IAAI,SAC/E,2BAAOR,UAAU,eAAeM,KAAO,SAASC,YAAc,SAASC,IAAI,WAC3E,2BAAOR,UAAU,SAASM,KAAO,SAASC,YAAY,SAASnB,MAAQ,aAI/E,yBAAKY,UAAU,gBAEdE,KAAKH,MAAMD,SACRI,KAAKH,MAAMH,KAAKa,KAAI,SAACC,EAAMC,GAAP,OAChB,yBAAKX,UAAU,eAAeY,IAAKD,GAC/B,yBAAKX,UAAU,qBACX,yBAAKA,UAAU,iBACX,yBAAKG,IAAKO,EAAKG,iBAEnB,yBAAKb,UAAU,aAAaU,EAAKI,WACjC,yBAAKd,UAAU,eAAeU,EAAKK,YACnC,4BAAQC,QAAS,kBAAKC,OAAOC,KAAKR,EAAKS,WAAY,WAAWC,WAAY,aAAOpB,UAAU,kBAA3F,qBAIR,S,GAvDHqB,IAAMC,WCMZC,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.d3246f49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/itunes.bc44524e.png\";","import React from 'react';\nimport './Header.scss'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport banner from './../../media/itunes.png';\n\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list:[],\n            isLoaded : false\n        }\n    }\n\n    fetchSongs = (e) => {\n        e.preventDefault();\n        console.log(this.refs.name.value)\n        fetch(`https://cors-anywhere.herokuapp.com/https://itunes.apple.com/search?term=${this.refs.name.value}&limit=${this.refs.number.value}`)\n        .then(res => res.json())\n        .then((data) => {\n          console.log(data); \n          this.setState ({\n            list: data.results,\n            isLoaded: true,\n          })\n        });\n        console.log(\"Error\")\n      }\n\n    render() {\n        return (\n            <div className=\"song-search-wrapper\">\n                <form className=\"form-wrapper\" onSubmit = {this.fetchSongs}>\n                    <div className=\"banner-wrapper\">\n                        <img src={banner} alt=\"image-banner\"></img>\n                        <div className=\"itunes-heading\">Song Search</div>\n                        <div className=\"itune-description\">Preview and surf the songs from iTunes Library.</div>\n                    </div>\n                    <div className=\"input-wrapper\">\n                        <input className=\"enter-artist\" type = 'text' placeholder = 'Enter Artist' ref=\"name\"></input>\n                        <input className=\"enter-number\" type = 'number' placeholder = 'Number' ref=\"number\"></input>\n                        <input className=\"submit\" type = 'submit' placeholder='Submit' value = 'Submit'></input>\n                    </div>\n\n                </form>\n                <div className=\"card-wrapper\">\n                \n                {this.state.isLoaded ? (\n                    this.state.list.map((item, index) => (\n                        <div className=\"item-wrapper\" key={index} >\n                            <div className=\"inner-wrapper box\">\n                                <div className=\"image-wrapper\">\n                                    <img src={item.artworkUrl100}></img>\n                                </div>\n                                <div className=\"song-name\">{item.trackName}</div>\n                                <div className=\"artist-name\">{item.artistName}</div>\n                                <button onClick={()=> window.open(item.previewUrl, \"_blank\")} onKeyPress={()=>{}}className=\"preview-button\">Preview Song</button>\n                            </div>\n                        </div>\n                    ))\n                    ) : \"\"\n                }\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}